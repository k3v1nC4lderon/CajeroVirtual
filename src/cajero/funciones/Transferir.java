/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cajero.funciones;
import cajero.*;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author ETHAN PIERCE
 */
public class Transferir extends javax.swing.JFrame {

    /**
     * Creates new form Transferir
     */
    String nCuenta, user, tipoCuenta;
    boolean idioma;
    public Transferir(String nCuenta, String user, boolean idioma, String tipoCuenta) {
        initComponents();
        this.nCuenta = nCuenta;
        this.user = user;
        this.idioma  = idioma;
        this.tipoCuenta = tipoCuenta;
        cambiarIdioma();
        actualizarBalance();
        jPanel1.setBackground(Color.getHSBColor(0.53f, 0.52f, 0.92f));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        bAmount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        bVolver = new javax.swing.JButton();
        bConfirmar = new javax.swing.JToggleButton();
        tMonto = new javax.swing.JTextField();
        tnCuenta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("Saldo:");
        jLabel4.setForeground(Color.WHITE);
        jLabel4.setFont(new Font("Helvetica", Font.BOLD, 20));

        bAmount.setForeground(Color.WHITE);
        bAmount.setFont(new Font("Helvetica", Font.BOLD, 20));

        bVolver.setText("Volver");
        bVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bVolverActionPerformed(evt);
            }
        });
        bVolver.setForeground(Color.WHITE);
        bVolver.setFont(new Font("Helvetica", Font.BOLD, 20));

        bConfirmar.setText("Confirmar");
        bConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bConfirmarActionPerformed(evt);
            }
        });
        bConfirmar.setForeground(Color.WHITE);
        bConfirmar.setFont(new Font("Helvetica", Font.BOLD, 20));

        tMonto.setFont(new Font("Helvetica", Font.BOLD, 20));

        tnCuenta.setFont(new Font("Helvetica", Font.BOLD, 20));

        jLabel2.setText("Monto");
        jLabel2.setForeground(Color.WHITE);
        jLabel2.setFont(new Font("Helvetica", Font.BOLD, 20));

        jLabel1.setText("Numero de cuenta");
        jLabel1.setForeground(Color.WHITE);
        jLabel1.setFont(new Font("Helvetica", Font.BOLD, 20));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(428, 428, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(bConfirmar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 387, Short.MAX_VALUE)
                            .addComponent(bVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tnCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 234, Short.MAX_VALUE)
                            .addComponent(bAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(29, 29, 29)))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(tnCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(0, 59, Short.MAX_VALUE))
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(25, 25, 25))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(bAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(72, 72, 72)))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bConfirmarActionPerformed
        Cuentas cuenta = new Cuentas();
            if(!tnCuenta.getText().equals("") && !tMonto.getText().equals("")){
                if(cuenta.existeCuenta(tnCuenta.getText())){
                    //if(cuenta.tipoCuenta(tnCuenta.getText()).equals(tipoCuenta)){
                    int opcion;
                if(idioma){
                    opcion = JOptionPane.showConfirmDialog(null, "¿Está seguro de continuar?", "Confirmación", JOptionPane.YES_NO_OPTION);
                }else{
                    opcion = JOptionPane.showConfirmDialog(null, "Are you sure to continue?", "Confirmation", JOptionPane.YES_NO_OPTION);
                }
                
                        
                if (opcion == JOptionPane.YES_OPTION && Double.parseDouble(cuenta.getSaldo(nCuenta, tipoCuenta)) - Double.parseDouble(tnCuenta.getText()) >= 0.01) {
                    // Código si el usuario elige "Aceptar"
                    String tipoCuentaReceptora = cuenta.tipoCuenta(tnCuenta.getText());
                    Transaccion t = new Transaccion();
                    double monto = Double.parseDouble(tMonto.getText());
                    monto = Math.round(monto);
                    switch(cuenta.tipoCuenta(nCuenta)){
                        case "Bolivianos":
                                switch(tipoCuentaReceptora){
                                    case "Bolivianos":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(monto, tnCuenta.getText());
                                        actualizarBalance();
                                        //String monto = tMonto.getText(); 
                                        t.crearTransaccion(nCuenta,"Transfirio",monto,tipoCuenta,tnCuenta.getText());
                                            break;
                                    case "Dolares":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(Math.round(monto/6.90), tnCuenta.getText());
                                        actualizarBalance();
                                        //Transaccion t = new Transaccion();
                                        //String monto = tMonto.getText(); 
                                        t.crearTransaccion(nCuenta,"Transfirio",Math.round(monto/6.90),tipoCuenta,tnCuenta.getText());
                                            break;
                                    case "Euros":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        actualizarBalance();
                                        //Transaccion t = new Transaccion();
                                        //String monto = tMonto.getText(); 
                                        cuenta.transferirReceptor(Math.round(monto/7.50), tnCuenta.getText());
                                        t.crearTransaccion(nCuenta,"Transfirio",Math.round(monto/7.50),tipoCuenta,tnCuenta.getText());
                                            break;
                                }   
                                break;
                        case "Dolares":
                                switch(tipoCuentaReceptora){
                                    case "Bolivianos":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        actualizarBalance();
                                        //String monto = tMonto.getText(); 
                                        cuenta.transferirReceptor(Math.round(monto*6.90), tnCuenta.getText());
                                        t.crearTransaccion(nCuenta,"Transfirio",Math.round(monto*6.90),tipoCuenta,tnCuenta.getText());
                                            break;
                                    case "Dolares":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(monto, tnCuenta.getText());
                                        actualizarBalance();
                                        //Transaccion t = new Transaccion();
                                        //String monto = tMonto.getText(); 
                                        
                                        t.crearTransaccion(nCuenta,"Transfirio",monto,tipoCuenta,tnCuenta.getText());
                                            break;
                                    case "Euros":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(Math.round(monto*0.90), tnCuenta.getText());
                                        actualizarBalance();
                                        //Transaccion t = new Transaccion();
                                        //String monto = tMonto.getText(); 
                                        t.crearTransaccion(nCuenta,"Transfirio",Math.round(monto*0.90),tipoCuenta,tnCuenta.getText());
                                            break;
                                }   
                                break;
                        case "Euros":
                                switch(tipoCuentaReceptora){
                                    case "Bolivianos":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(monto*7.50, tnCuenta.getText());
                                        actualizarBalance();
                                        //String monto = tMonto.getText(); 
                                        t.crearTransaccion(nCuenta,"Transfirio",monto*7.50,tipoCuenta,tnCuenta.getText());
                                            break;
                                    case "Dolares":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(monto/1.90, tnCuenta.getText());
                                        actualizarBalance();
                                        //Transaccion t = new Transaccion();
                                        //String monto = tMonto.getText(); 
                                        t.crearTransaccion(nCuenta,"Transfirio",monto/1.90,tipoCuenta,tnCuenta.getText());
                                            break;
                                    case "Euros":
                                        cuenta.transferir(Integer.parseInt(tMonto.getText()), nCuenta);
                                        cuenta.transferirReceptor(Math.round(monto), tnCuenta.getText());
                                        actualizarBalance();
                                        //Transaccion t = new Transaccion();
                                        //String monto = tMonto.getText(); 
                                        t.crearTransaccion(nCuenta,"Transfirio",monto,tipoCuenta,tnCuenta.getText());
                                            break;
                                }   
                                break;
                    
                    }
                                
                } else {
                    // Código si el usuario elige "Rechazar" o cierra la ventana

                }
                
            }
            }else{
                jLabel3.setText(idioma ? "Ingrese datos." : "Enter data.");
                jLabel3.setBackground(Color.red);
                jLabel3.setOpaque(true);
                jLabel3.setHorizontalAlignment(SwingConstants.CENTER);
            }
        
    }//GEN-LAST:event_bConfirmarActionPerformed

    private void bVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bVolverActionPerformed
        Sesion s = new Sesion(user, idioma, tipoCuenta);
        s.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_bVolverActionPerformed

    /**
     * @param args the command line arguments
     */
   public void cambiarIdioma(){
       if(idioma == false)
       {
           jLabel1.setText("Account Number");
           jLabel2.setText("Amount");
           bConfirmar.setText("Confirm");
           bVolver.setText("Go Back");
       }
   }
       public void actualizarBalance(){
           Cuentas cuenta = new Cuentas();
           bAmount.setText("$"+cuenta.getSaldo(nCuenta, this.tipoCuenta));
       }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bAmount;
    private javax.swing.JToggleButton bConfirmar;
    private javax.swing.JButton bVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tMonto;
    private javax.swing.JTextField tnCuenta;
    // End of variables declaration//GEN-END:variables
}
